#include <QSettings>
#include "config.h"
#include "config_field.h"
#include "widget/compositionselector.h"
#include "widget/compositiontemplatelist.h"
#include "widget/frameformulamodification.h"


static QSettings mc_config{"MassCalculator", "Desktop"};

QString Config_serializeComposition(const QList<ElementRange>& composition)
{
    QStringList rangeList;
    for (auto i=composition.cbegin(); i!=composition.cend(); i++)
    {
        rangeList.push_back(QString("[%1,%2,%3]")
                                   .arg(QString::number(i->atomNumber))
                                   .arg(QString::number(i->minCount))
                                   .arg(QString::number(i->maxCount)));
    }
    return rangeList.join('+');
}

QList<ElementRange> Config_unserializeComposition(QString str)
{
    QStringList allowElements(str.split('+')), tempStringList;
    QList<ElementRange> result;
    ElementRange tempRange;
    for (int i=0; i<allowElements.count(); i++)
    {
        tempStringList = allowElements[i].mid(1, allowElements[i].length() - 2)
                                         .split(',');
        if (tempStringList.count() == 3)
        {
            tempRange.atomNumber = tempStringList[0].toInt();
            tempRange.minCount = tempStringList[1].toInt();
            tempRange.maxCount = tempStringList[2].toInt();
            result.push_back(tempRange);
        }
    }
    return result;
}

void Config::loadFormulaModification(FrameFormulaModification& widget) const
{
    Formula f;
    if (f.parse(mc_config.value(MC_CONFIG_FORMULA_MODIFICATION)
                         .toString().toStdString()))
        widget.setModification(f);
    widget.setCharge(mc_config.value(MC_CONFIG_FORMULA_CHARGE).toInt());
}

void Config::saveFormulaModification(const FrameFormulaModification& widget)
{
    mc_config.setValue(MC_CONFIG_FORMULA_MODIFICATION,
                       QString::fromStdString(
                                   widget.modification().toString()));
    mc_config.setValue(MC_CONFIG_FORMULA_CHARGE, widget.charge());
}

void Config::loadMassModification(FrameFormulaModification& widget) const
{
    Formula f;
    if (f.parse(mc_config.value(MC_CONFIG_MASS_MODIFICATION)
                         .toString().toStdString()))
        widget.setModification(f);
    widget.setCharge(mc_config.value(MC_CONFIG_MASS_CHARGE).toInt());
}

void Config::saveMassModification(const FrameFormulaModification& widget)
{
    mc_config.setValue(MC_CONFIG_MASS_MODIFICATION,
                       QString::fromStdString(
                                   widget.modification().toString()));
    mc_config.setValue(MC_CONFIG_MASS_CHARGE, widget.charge());
}

MassTolerance Config::massTolerance() const
{
    QVariant toleranceMin = mc_config.value(MC_CONFIG_MASS_TOL_MIN);
    QVariant toleranceMax = mc_config.value(MC_CONFIG_MASS_TOL_MAX);
    if (toleranceMin.isNull())
        toleranceMin.setValue(-0.05);
    if (toleranceMax.isNull())
        toleranceMax.setValue(0.05);
    MassTolerance tolerance{toleranceMin.toDouble(),
                            toleranceMax.toDouble(),
                            mc_config.value(MC_CONFIG_MASS_TOL_REL).toBool()};
    return tolerance;
}

void Config::setMassTolerance(const MassTolerance& tolerance)
{
    mc_config.setValue(MC_CONFIG_MASS_TOL_MIN, tolerance.min);
    mc_config.setValue(MC_CONFIG_MASS_TOL_MAX, tolerance.max);
    mc_config.setValue(MC_CONFIG_MASS_TOL_REL, tolerance.relative);
}

void Config::loadCompositionSelector(CompositionSelector& widget) const
{
    QStringList serializedList = mc_config.value(MC_CONFIG_MASS_ELEMENTS_LIST)
                                          .toStringList();
    QStringList remarkList = mc_config.value(MC_CONFIG_MASS_ELEMENTS_REMARKS)
                                      .toStringList();
    if (serializedList.count() > 0 && remarkList.count() > 0)
    {
        widget.setElementRanges(
                    Config_unserializeComposition(serializedList[0]));
        widget.setRemark(remarkList[0]);
        return;
    }

    // For configuration generated by older versions: use fallback settings
    QString allowElements = mc_config.value(MC_CONFIG_MASS_ELEMENTS).toString();
    if (allowElements.length() > 0)
        widget.setElementRanges(Config_unserializeComposition(allowElements));
}

void Config::saveCompositionSelector(const CompositionSelector& widget)
{
    mc_config.setValue(MC_CONFIG_MASS_ELEMENTS,
                       Config_serializeComposition(widget.getElementRanges()));
}

void Config::loadCompositionTemplates(CompositionTemplateList &widget) const
{
    QStringList serializedList = mc_config.value(MC_CONFIG_MASS_ELEMENTS_LIST)
                                          .toStringList();
    QStringList remarkList = mc_config.value(MC_CONFIG_MASS_ELEMENTS_REMARKS)
                                      .toStringList();
    for (int i=0; i<serializedList.length(); i++)
    {
        widget.appendComposition(
                    Config_unserializeComposition(serializedList[i]),
                    i < remarkList.count() ? remarkList[i] : "");
    }
}

void Config::saveCompositionTemplates(const CompositionTemplateList& widget)
{
    QStringList serializedList;
    QStringList remarkList;
    int compositionCount = widget.count();
    for (int i=0; i<compositionCount; i++)
    {
        serializedList.append(Config_serializeComposition(widget.composition(i)));
        remarkList.append(widget.remark(i));
    }
    mc_config.setValue(MC_CONFIG_MASS_ELEMENTS_LIST, serializedList);
    mc_config.setValue(MC_CONFIG_MASS_ELEMENTS_REMARKS, remarkList);
}

int Config::numberPrecision(PrecisionType type) const
{
    QVariant value = mc_config.value(QString("%1-%2")
                                            .arg(MC_CONFIG_MASS_PRECISION)
                                            .arg(QString::number(int(type))));
    if (value.isNull())
        return 4;
    else
        return value.toInt();
}

void Config::setNumberPrecision(PrecisionType type, int digits)
{
    mc_config.setValue(QString("%1-%2")
                              .arg(MC_CONFIG_MASS_PRECISION)
                              .arg(int(type)),
                       digits);
}

double Config::binningWidth() const
{
    QVariant value = mc_config.value(MC_CONFIG_ISOTOPIC_BIN_WIDTH);
    if (value.isNull())
        return 0.5;
    else
        return value.toDouble();
}

void Config::setBinningWidth(double width)
{
    mc_config.setValue(MC_CONFIG_ISOTOPIC_BIN_WIDTH, width);
}

int Config::maxIsotopicCount() const
{
    QVariant value = mc_config.value(MC_CONFIG_ISOTOPIC_BIN_COUNT);
    if (value.isNull())
        return 10;
    else
        return value.toInt();
}

void Config::setMaxIsotopicCount(int count)
{
    mc_config.setValue(MC_CONFIG_ISOTOPIC_BIN_COUNT, count);
}

QString Config::localeName() const
{
    QVariant value = mc_config.value(MC_CONFIG_LOCALE_NAME);
    if (value.isNull())
        return defaultLocaleName();
    else
        return value.toString();
}

QString Config::defaultLocaleName()
{
    return QLocale::system().name();
}

void Config::setLocaleName(const QString& locale)
{
    mc_config.setValue(MC_CONFIG_LOCALE_NAME, locale);
}
